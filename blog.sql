-- MySQL dump 10.13  Distrib 5.7.30, for Win64 (x86_64)
--
-- Host: 192.168.0.109    Database: blog
-- ------------------------------------------------------
-- Server version	5.7.39

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blog_content`
--

DROP TABLE IF EXISTS `blog_content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_content` (
  `id` varchar(300) NOT NULL,
  `title` varchar(100) DEFAULT NULL,
  `introduce` varchar(100) DEFAULT NULL,
  `date` varchar(100) DEFAULT NULL,
  `article` varchar(20000) DEFAULT NULL,
  `classification` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_content`
--

LOCK TABLES `blog_content` WRITE;
/*!40000 ALTER TABLE `blog_content` DISABLE KEYS */;
INSERT INTO `blog_content` VALUES ('1558380947367383040','工厂的实现','java设计模式','2022.08.13','<h1><a id=\"_0\"></a>工厂的实现</h1>\n<p>Bean:在计算机英语中，有可重用组件的含义<br />\nJavaBean：用Java语言编写的可用组件<br />\nJavaBean&gt;实体类<br />\n它就是创建我们类对象的配置类<br />\n第一点：需要一个配置文件来配置我们的类<br />\n配置的类容：唯一标识：会限制类名（key,value）<br />\n第二点：通过读取配置文件中的类容：反射创建对象<br />\n位置文件xml，properties</p>\n<p>单例：单例有线程安全问题<br />\n多例：执行效力低</p>\n<h2><a id=\"_13\"></a>单例</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BeanFactory</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Properties properties;\n    <span class=\"hljs-comment\">//定义一个Map来存放我们要创建的对象，我们把它称之为容器</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map&lt;String,Object&gt; Beans;\n    <span class=\"hljs-keyword\">static</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            properties=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>();\n            InputStream in=BeanFactory.class.getClassLoader().getResourceAsStream(<span class=\"hljs-string\">&quot;bean.properties&quot;</span>);\n            properties.load(in);\n            Beans=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();\n            <span class=\"hljs-comment\">//获取所有的键</span>\n            Enumeration&lt;Object&gt; key=properties.keys();\n            <span class=\"hljs-keyword\">while</span> (key.hasMoreElements()){\n               <span class=\"hljs-comment\">//一次得到键名</span>\n               <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">keys</span> <span class=\"hljs-operator\">=</span> key.nextElement().toString();\n               <span class=\"hljs-comment\">//通过键名来获取value</span>\n               <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">BeanPath</span> <span class=\"hljs-operator\">=</span> properties.getProperty(keys);\n               <span class=\"hljs-comment\">//反射创建对象</span>\n                <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> Class.forName(BeanPath).newInstance();\n                <span class=\"hljs-comment\">//将key与value存放与HashMap中</span>\n                Beans.put(keys,value);\n            }\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (InstantiationException e) {\n            e.printStackTrace();\n        }\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Object <span class=\"hljs-title function_\">getBean</span><span class=\"hljs-params\">(String BeanName)</span>{\n    <span class=\"hljs-comment\">//通过Beans.get(BeanName)来获取value：com.Spring.dao.impl.IAccountDaoImpl</span>\n        <span class=\"hljs-keyword\">return</span> Beans.get(BeanName);\n    }\n</code></div></pre>\n<h2><a id=\"_52\"></a>多例</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BeanFactory</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Properties properties;\n    <span class=\"hljs-keyword\">static</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            properties=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Properties</span>();\n            InputStream in=BeanFactory.class.getClassLoader().getResourceAsStream(<span class=\"hljs-string\">&quot;bean.properties&quot;</span>);\n            properties.load(in);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (InstantiationException e) {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Object <span class=\"hljs-title function_\">getBean</span><span class=\"hljs-params\">(String BeanName)</span>{\n        Object Bean=<span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-comment\">//通过properties，的key来获取类</span>\n            String BeanPath=properties.getProperty(BeanName);\n            <span class=\"hljs-comment\">// Class.forName(路径名); 在学习java的反射机制的时候，首先会通过Class.forName()</span>\n            <span class=\"hljs-comment\">// 获取字节码对象，</span>\n            <span class=\"hljs-comment\">//然后再用这个对象调用newInstance()方法，创建这个类的对象，再通过对象去操作相应的字段；</span>\n            Bean=Class.forName(BeanPath).newInstance();\n        } <span class=\"hljs-keyword\">catch</span> (InstantiationException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) {\n            e.printStackTrace();\n        } <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        <span class=\"hljs-keyword\">return</span> Bean;\n    }\n\n\n}\n</code></div></pre>\n','java'),('1558403809264398336','链表实现','链表代码案例','2022.08.13','<h2><a id=\"_0\"></a>单链表代码案例</h2>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">useData</span> &lt;T&gt;{\n    <span class=\"hljs-comment\">//单链表的数据机构</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;T&gt;{\n        T element;\n        Node next;\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(T element)</span>{\n           <span class=\"hljs-built_in\">this</span>.element=element;\n        }\n    }\n    <span class=\"hljs-comment\">//头指针</span>\n    Node head;\n    <span class=\"hljs-comment\">//为指针</span>\n    Node tail;\n    <span class=\"hljs-type\">int</span> size;\n    <span class=\"hljs-comment\">//数据初始化</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">useData</span><span class=\"hljs-params\">()</span>{\n        head=<span class=\"hljs-literal\">null</span>;\n        tail=<span class=\"hljs-literal\">null</span>;\n        size=<span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-comment\">//向尾节点添加数据</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addList</span><span class=\"hljs-params\">(T element)</span>\n    {\n        <span class=\"hljs-comment\">//建立新的节点</span>\n        Node newNode=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(element);\n        <span class=\"hljs-keyword\">if</span>(tail==<span class=\"hljs-literal\">null</span>){\n            <span class=\"hljs-comment\">//如果为空给尾指针赋值</span>\n            tail=newNode;\n            <span class=\"hljs-comment\">//头指针指向尾指针的第一个元素</span>\n            head=tail;\n        }<span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">//将新的节点赋值给尾节点下一个元素</span>\n            tail.next=newNode;\n            <span class=\"hljs-comment\">//移动指针与当前位置</span>\n            tail=newNode;\n        }\n        <span class=\"hljs-comment\">//链表长度++</span>\n        <span class=\"hljs-built_in\">this</span>.size++;\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">AddList</span><span class=\"hljs-params\">(T element,<span class=\"hljs-type\">int</span> Point)</span>{\n        <span class=\"hljs-keyword\">if</span>(Point&gt;size){\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        Node newNode=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(element);\n        <span class=\"hljs-keyword\">if</span>(Point==<span class=\"hljs-number\">0</span>){\n            newNode.next=head;\n            head=newNode;\n            <span class=\"hljs-keyword\">if</span> (tail == <span class=\"hljs-literal\">null</span>) {\n                tail=newNode;\n            }\n            <span class=\"hljs-built_in\">this</span>.size++;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(Point==size){\n            <span class=\"hljs-built_in\">this</span>.addList(element);\n        }\n        <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">prev</span> <span class=\"hljs-operator\">=</span> head;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size - <span class=\"hljs-number\">1</span>; i++) {\n                prev = prev.next;\n            }\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> prev.next;\n            newNode.next = next;\n            prev.next = newNode;\n            size++;\n        }\n    }\n    <span class=\"hljs-comment\">//链表的遍历</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.head;\n        <span class=\"hljs-keyword\">while</span> (cur!=<span class=\"hljs-literal\">null</span>){\n            System.out.println(cur.element);\n            cur=cur.next;\n        }\n        System.out.println(<span class=\"hljs-string\">&quot;NO&quot;</span>);\n\n    }\n    <span class=\"hljs-comment\">//链表元素的删除</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> deleteID)</span>{\n        Node cur=<span class=\"hljs-built_in\">this</span>.head;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;deleteID-<span class=\"hljs-number\">2</span>;i++){\n            cur=cur.next;\n        }\n        Node next=cur.next.next;\n        cur.next=next;\n        <span class=\"hljs-built_in\">this</span>.size--;\n    }\n\n}\n\n</code></div></pre>\n','java'),('1558690782436741120','GCC+Openocd','GCC+Openocd编译与烧录代码','2022.08.14','<h2><a id=\"1_0\"></a>1，配置环境变量</h2>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\">#右键计算机</span>\n<span class=\"hljs-comment\">#高级系统设置</span>\n<span class=\"hljs-comment\">#环境变量</span>\n<span class=\"hljs-comment\">#将gcc与openocd 文件目录添加到path里面</span>\nD:\\arm_linux_gcc\\bin\nC:\\xpack-openocd-0.11.0-4\\bin\n</code></div></pre>\n<h2><a id=\"_10\"></a>注意事项</h2>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\">#在烧录stm32f103c8t6时烧录报错</span>\n\n\n\nPS D:\\stm32f1x_Arm&gt; make flash\nopenocd -f C:\\xpack-openocd-0.11.0-4\\scripts\\interface\\stlink.cfg -c <span class=\"hljs-string\">&quot;set CPUTAPID 0x2ba01477&quot;</span> -f C:\\xpack-openocd-0.11.0-4\\scripts\\target\\stm32f1x.cfg -c <span class=\"hljs-string\">&quot;program ./OBJ/test.hex&quot;</span> -c <span class=\"hljs-string\">&quot;reset&quot;</span> -c <span class=\"hljs-string\">&quot;shutdown&quot;</span>\nxPack OpenOCD x86_64 Open On-Chip Debugger 0.11.0+dev (2022-03-25-17:32)\nLicensed under GNU GPL v2\nFor bug reports, <span class=\"hljs-built_in\">read</span>\n        http://openocd.org/doc/doxygen/bugs.html\n0x2ba01477\nInfo : auto-selecting first available session transport <span class=\"hljs-string\">&quot;hla_swd&quot;</span>. To override use <span class=\"hljs-string\">&#x27;transport select &lt;transport&gt;&#x27;</span>.\nInfo : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD\nInfo : DEPRECATED target event trace-config; use TPIU events {pre,post}-{<span class=\"hljs-built_in\">enable</span>,<span class=\"hljs-built_in\">disable</span>}\nInfo : clock speed 1000 kHz\nInfo : STLINK V2J38S7 (API v2) VID:PID 0483:3748\nInfo : Target voltage: 2.968630\nWarn : UNEXPECTED idcode: 0x1ba01477\nError: expected 1 of 1: 0x2ba01477\n<span class=\"hljs-keyword\">in</span> procedure <span class=\"hljs-string\">&#x27;program&#x27;</span>\n** OpenOCD init failed **\nshutdown <span class=\"hljs-built_in\">command</span> invoked\n\nmake: *** [flash] Error 1\n\n<span class=\"hljs-comment\">#Makefile代码中添加-c &quot;set CPUTAPID 0x2ba01477&quot;</span>\n<span class=\"hljs-comment\">#根基报错内容修改 末尾地址  Warn : UNEXPECTED idcode: 0x1ba01477  根据提示地址来</span>\n<span class=\"hljs-comment\">#-c &quot;set CPUTAPID 0x1ba01477&quot;</span>\n\n\n\n<span class=\"hljs-comment\">#烧录成功的输出</span>\nPS D:\\stm32f1x_Arm&gt; make flash\nopenocd -f C:\\xpack-openocd-0.11.0-4\\scripts\\interface\\stlink.cfg -c <span class=\"hljs-string\">&quot;set CPUTAPID 0x1ba01477&quot;</span> -f C:\\xpack-openocd-0.11.0-4\\scripts\\target\\stm32f1x.cfg -c <span class=\"hljs-string\">&quot;program ./OBJ/test.hex&quot;</span> -c <span class=\"hljs-string\">&quot;reset&quot;</span> -c <span class=\"hljs-string\">&quot;shutdown&quot;</span>\nxPack OpenOCD x86_64 Open On-Chip Debugger 0.11.0+dev (2022-03-25-17:32)\nLicensed under GNU GPL v2\nFor bug reports, <span class=\"hljs-built_in\">read</span>\n        http://openocd.org/doc/doxygen/bugs.html\n0x1ba01477\nInfo : auto-selecting first available session transport <span class=\"hljs-string\">&quot;hla_swd&quot;</span>. To override use <span class=\"hljs-string\">&#x27;transport select &lt;transport&gt;&#x27;</span>.   \nInfo : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD\nInfo : DEPRECATED target event trace-config; use TPIU events {pre,post}-{<span class=\"hljs-built_in\">enable</span>,<span class=\"hljs-built_in\">disable</span>}\nInfo : clock speed 1000 kHz\nInfo : STLINK V2J38S7 (API v2) VID:PID 0483:3748\nInfo : Target voltage: 2.962277\nInfo : [stm32f1x.cpu] Cortex-M3 r1p1 processor detected\nInfo : [stm32f1x.cpu] target has 6 breakpoints, 4 watchpoints\nInfo : starting gdb server <span class=\"hljs-keyword\">for</span> stm32f1x.cpu on 3333\nInfo : Listening on port 3333 <span class=\"hljs-keyword\">for</span> gdb connections\ntarget halted due to debug-request, current mode: Thread \nxPSR: 0x01000000 pc: 0x08005f90 msp: 0x20005000\n** Programming Started **\nInfo : device <span class=\"hljs-built_in\">id</span> = 0x20036410\nInfo : flash size = 128kbytes\nInfo : Padding image section 0 at 0x080001e4 with 4 bytes\n** Programming Finished **\nshutdown <span class=\"hljs-built_in\">command</span> invoked\n</code></div></pre>\n','嵌入式'),('18273891971256','数据结构HashMap','数据结构HashMap','2022.5.23','<h1><a id=\"HashMap_0\"></a>数据结构HashMap</h1>\r\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashListMap</span>{\r\n\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> HashListMap hashListMap=<span class=\"hljs-literal\">null</span>;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> HashListMap <span class=\"hljs-title function_\">hashListMap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> SizeNode)</span>{\r\n        <span class=\"hljs-keyword\">if</span>(hashListMap==<span class=\"hljs-literal\">null</span>){\r\n            hashListMap=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashListMap</span>(SizeNode);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> hashListMap;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>{\r\n        String key;\r\n        String value;\r\n        Node next;\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(String key,String value)</span>{\r\n            <span class=\"hljs-built_in\">this</span>.key=key;\r\n            <span class=\"hljs-built_in\">this</span>.value=value;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> SizeNode=<span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">//传入你要设置的链表长度</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashListMap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> SizeNode)</span>{\r\n        <span class=\"hljs-built_in\">this</span>.SizeNode=SizeNode;\r\n        head=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>[SizeNode];\r\n        tail=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>[SizeNode];\r\n    }\r\n\r\n    Node[] head;\r\n    Node[] tail;\r\n\r\n\r\n    <span class=\"hljs-comment\">//计算hash值</span>\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hash</span><span class=\"hljs-params\">(String key)</span>{\r\n        <span class=\"hljs-keyword\">return</span> key==<span class=\"hljs-literal\">null</span>?<span class=\"hljs-number\">0</span>:key.hashCode()&amp;(SizeNode-<span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(String key,String Value)</span>{\r\n        Node node=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key,Value);\r\n        <span class=\"hljs-type\">int</span> hash=<span class=\"hljs-built_in\">this</span>.hash(key);\r\n        <span class=\"hljs-keyword\">if</span>(head[hash]==<span class=\"hljs-literal\">null</span>&amp;&amp;tail[hash]==<span class=\"hljs-literal\">null</span>){\r\n            tail[hash]=node;\r\n            head[hash]=tail[hash];\r\n        }<span class=\"hljs-keyword\">else</span>{\r\n            tail[hash].next=node;\r\n            tail[hash]=node;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">Get</span><span class=\"hljs-params\">(String key)</span>{\r\n        <span class=\"hljs-type\">int</span> hash=<span class=\"hljs-built_in\">this</span>.hash(key);\r\n        Node cur=head[hash];\r\n       <span class=\"hljs-keyword\">while</span> (cur!=<span class=\"hljs-literal\">null</span>&amp;&amp;cur.key!=key){\r\n           cur=cur.next;\r\n       }\r\n       <span class=\"hljs-keyword\">return</span> cur==<span class=\"hljs-literal\">null</span>?<span class=\"hljs-literal\">null</span>:cur.value;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">GetNode</span><span class=\"hljs-params\">()</span>{\r\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;SizeNode;i++){\r\n            Node cur=head[i];\r\n            <span class=\"hljs-keyword\">while</span> (cur!=<span class=\"hljs-literal\">null</span>){\r\n                System.out.println(cur.key);\r\n                System.out.println(cur.value);\r\n                cur=cur.next;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n</code></div></pre>','java'),('18273891971273','ARM汇编与gcc','arm汇编风格','2022.5.23','<h1><a id=\"GCC_0\"></a>汇编与GCC汇编</h1>\r\n<pre><div class=\"hljs\"><code class=\"lang-armasm\">/**\r\n您忘记正确设置程序集。要解决此问题，请在文件开头发出这些指令：\r\n*/\r\n.syntax unified\r\n.cpu cortex-m3\r\n.fpu softvfp\r\n.thumb\r\n\r\n\r\n.global add\r\n.global gpio_init_PD2\r\n.global test_arm\r\n.global demo\r\n.global number_function\r\n\r\n\r\n\r\n.equ  APB2ENR,        0x40021080     /* 类似于C语言的宏定义   #define ABB2ENR  0x40021080 */\r\n.equ  CHR,            0x40010804\r\n.equ  ODR,            0x4001080c\r\n\r\nadd:\r\n    add r3,r0,r1      /*ARM汇编参数传递   r0-r5*/\r\n    add r3,r2\r\n    mov r0,r3        /*ARM汇编参数返回    r0 */\r\n    mov pc,lr\r\n\r\n\r\n\r\n\r\ngpio_init_PD2:\r\n    ldr r0,=APB2ENR   /*将 APB2ENR的值给r0*/\r\n    mov r2,#4\r\n    str r2,[r0]    /*获取 r2中的值给  r0指向的地址*/\r\n\r\n    ldr r0,=CHR\r\n    ldr r1,[r0]\r\n    orr r1,#1\r\n    str r1,[r0]\r\n\r\n    ldr r0,=ODR\r\n    ldr r1,[r0]\r\n    bic r1,#256\r\n    str r1,[r0]\r\n\r\n    mov pc,lr\r\n\r\n\r\ntest_arm:\r\n    mov r1,r0\r\n    bx r1\r\n    mov pc,lr    /*返回跳转  将链接寄存器中的值lr给pc程序计数器寄存器*/\r\n\r\n\r\n\r\nnumber_function:\r\n    mov r1,r0\r\n    mov r3,#0\r\n    mov r5,#0\r\nloop1:\r\n    cmp r3,#10    /*将r3-10   设置标志位*/\r\n    beq for_end\r\n    add r3,#1\r\n    mov r0,#22\r\n    str r0,[r1,r5]\r\n    add r5,#4\r\n    b loop1\r\n    for_end:\r\n    mov pc,lr\r\n/*\r\n*\r\nBEQ    相等\r\nBNE    不等\r\nBPL    非负\r\nBMI    负\r\nBCC    无进位\r\nBCS    有进位\r\nBLO    小于（无符号数）\r\nBHS    大于等于（无符号数）\r\nBHI    大于（无符号数）\r\nBLS    小于等于（无符号数）\r\nBVC    无溢出（有符号数）\r\nBVS    有溢出（有符号数）\r\nBGT    大于（有符号数）\r\nBGE    大于等于（有符号数）\r\nBLT    小于（有符号数）\r\nBLE    小于等于（有符号数）\r\n*\r\n*\r\n*/\r\n</code></div></pre>\r\n<h3><a id=\"_95\"></a>内敛汇编</h3>\r\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-type\">int</span> num1=<span class=\"hljs-number\">10</span>,num2=<span class=\"hljs-number\">20</span>;\r\n\r\n    <span class=\"hljs-keyword\">asm</span> <span class=\"hljs-title function_\">volatile</span><span class=\"hljs-params\">(\r\n        <span class=\"hljs-string\">&quot;mov %0,%1\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;add %0,100\r\n	&quot;</span>   <span class=\"hljs-comment\">//参数的顺序从左到右使用数字序号来引用， 例如%0表示第一个参数。</span>\r\n        :<span class=\"hljs-string\">&quot;+r&quot;</span>(num1)     <span class=\"hljs-comment\">// 输入操作数</span>\r\n        :<span class=\"hljs-string\">&quot;r&quot;</span>(num2)      <span class=\"hljs-comment\">// 输入操作数</span>\r\n        :<span class=\"hljs-string\">&quot;memory&quot;</span>       <span class=\"hljs-comment\">// 修饰寄存器列表</span>\r\n    )</span>;\r\n\r\n\r\n    <span class=\"hljs-type\">int</span> number[<span class=\"hljs-number\">10</span>]={<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>};\r\n\r\n    <span class=\"hljs-keyword\">asm</span> <span class=\"hljs-title function_\">volatile</span><span class=\"hljs-params\">(\r\n        <span class=\"hljs-string\">&quot;mov r0,%0\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;mov r1,#0\r\n	&quot;</span> <span class=\"hljs-comment\">//循环因子</span>\r\n        <span class=\"hljs-string\">&quot;mov r2,#0\r\n	&quot;</span> <span class=\"hljs-comment\">//寻址</span>\r\n        <span class=\"hljs-string\">&quot;loop1:\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;cmp r1,#9\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;beq for_end\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;add r1,#1\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;mov r5,22\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;str r5,[r0,r2]\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;add r2,#4\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;b loop1\r\n	&quot;</span>\r\n        <span class=\"hljs-string\">&quot;for_end:\r\n	&quot;</span>\r\n        :\r\n        :<span class=\"hljs-string\">&quot;r&quot;</span>(number)\r\n        :<span class=\"hljs-string\">&quot;memory&quot;</span>\r\n    )</span>;\r\n\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++){\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;number=%d&quot;</span>,number[i]);\r\n    }\r\n</code></div></pre>\r\n','ARM汇编');
/*!40000 ALTER TABLE `blog_content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_information`
--

DROP TABLE IF EXISTS `user_information`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_information` (
  `username` varchar(50) NOT NULL,
  `password` varchar(50) DEFAULT NULL,
  `features` varchar(2000) DEFAULT NULL,
  `project` varchar(100) DEFAULT NULL,
  `avatar` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_information`
--

LOCK TABLES `user_information` WRITE;
/*!40000 ALTER TABLE `user_information` DISABLE KEYS */;
INSERT INTO `user_information` VALUES ('2191142854','1519164zzp..','软件开发,个人开发者##熟悉编程语言: java,c语言,html,css,js,ARM汇编,sql,shell##熟悉框架: springboot vue springcloud mybatis##熟悉网站分布式，前后端分离开发流程##可以完成私有云平台环境搭建##熟悉数据结构与算法，计算机网络，操作系统等等##喜欢电子,与科技##对stm32,arm-gcc,makefile,openocd,嵌入式有一定了解##计算机网络: http tcp-ip##爱好音乐,吉他##熟悉开发工具 vscode idea##','','http://192.168.0.109/images.jpg');
/*!40000 ALTER TABLE `user_information` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-08-15  9:31:52
